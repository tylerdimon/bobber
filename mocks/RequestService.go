// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	bobber "github.com/tylerdimon/bobber"
)

// RequestService is an autogenerated mock type for the RequestService type
type RequestService struct {
	mock.Mock
}

type RequestService_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestService) EXPECT() *RequestService_Expecter {
	return &RequestService_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: request
func (_m *RequestService) Add(request bobber.Request) (*bobber.Request, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *bobber.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(bobber.Request) (*bobber.Request, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(bobber.Request) *bobber.Request); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bobber.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(bobber.Request) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestService_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type RequestService_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - request bobber.Request
func (_e *RequestService_Expecter) Add(request interface{}) *RequestService_Add_Call {
	return &RequestService_Add_Call{Call: _e.mock.On("Add", request)}
}

func (_c *RequestService_Add_Call) Run(run func(request bobber.Request)) *RequestService_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bobber.Request))
	})
	return _c
}

func (_c *RequestService_Add_Call) Return(_a0 *bobber.Request, _a1 error) *RequestService_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestService_Add_Call) RunAndReturn(run func(bobber.Request) (*bobber.Request, error)) *RequestService_Add_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAll provides a mock function with given fields:
func (_m *RequestService) DeleteAll() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestService_DeleteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAll'
type RequestService_DeleteAll_Call struct {
	*mock.Call
}

// DeleteAll is a helper method to define mock.On call
func (_e *RequestService_Expecter) DeleteAll() *RequestService_DeleteAll_Call {
	return &RequestService_DeleteAll_Call{Call: _e.mock.On("DeleteAll")}
}

func (_c *RequestService_DeleteAll_Call) Run(run func()) *RequestService_DeleteAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RequestService_DeleteAll_Call) Return(_a0 error) *RequestService_DeleteAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RequestService_DeleteAll_Call) RunAndReturn(run func() error) *RequestService_DeleteAll_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: id
func (_m *RequestService) DeleteById(id string) (*bobber.Request, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 *bobber.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*bobber.Request, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *bobber.Request); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bobber.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestService_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type RequestService_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - id string
func (_e *RequestService_Expecter) DeleteById(id interface{}) *RequestService_DeleteById_Call {
	return &RequestService_DeleteById_Call{Call: _e.mock.On("DeleteById", id)}
}

func (_c *RequestService_DeleteById_Call) Run(run func(id string)) *RequestService_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RequestService_DeleteById_Call) Return(_a0 *bobber.Request, _a1 error) *RequestService_DeleteById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestService_DeleteById_Call) RunAndReturn(run func(string) (*bobber.Request, error)) *RequestService_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *RequestService) GetAll() ([]*bobber.Request, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*bobber.Request
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*bobber.Request, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*bobber.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bobber.Request)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type RequestService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *RequestService_Expecter) GetAll() *RequestService_GetAll_Call {
	return &RequestService_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *RequestService_GetAll_Call) Run(run func()) *RequestService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RequestService_GetAll_Call) Return(_a0 []*bobber.Request, _a1 error) *RequestService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestService_GetAll_Call) RunAndReturn(run func() ([]*bobber.Request, error)) *RequestService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *RequestService) GetById(id string) (*bobber.Request, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *bobber.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*bobber.Request, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *bobber.Request); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bobber.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestService_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type RequestService_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id string
func (_e *RequestService_Expecter) GetById(id interface{}) *RequestService_GetById_Call {
	return &RequestService_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *RequestService_GetById_Call) Run(run func(id string)) *RequestService_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *RequestService_GetById_Call) Return(_a0 *bobber.Request, _a1 error) *RequestService_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RequestService_GetById_Call) RunAndReturn(run func(string) (*bobber.Request, error)) *RequestService_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Match provides a mock function with given fields: method, path
func (_m *RequestService) Match(method string, path string) (string, string, string) {
	ret := _m.Called(method, path)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 string
	var r1 string
	var r2 string
	if rf, ok := ret.Get(0).(func(string, string) (string, string, string)); ok {
		return rf(method, path)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(method, path)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(method, path)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) string); ok {
		r2 = rf(method, path)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// RequestService_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type RequestService_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - method string
//   - path string
func (_e *RequestService_Expecter) Match(method interface{}, path interface{}) *RequestService_Match_Call {
	return &RequestService_Match_Call{Call: _e.mock.On("Match", method, path)}
}

func (_c *RequestService_Match_Call) Run(run func(method string, path string)) *RequestService_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *RequestService_Match_Call) Return(namespaceID string, endpointID string, response string) *RequestService_Match_Call {
	_c.Call.Return(namespaceID, endpointID, response)
	return _c
}

func (_c *RequestService_Match_Call) RunAndReturn(run func(string, string) (string, string, string)) *RequestService_Match_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequestService creates a new instance of RequestService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestService {
	mock := &RequestService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
