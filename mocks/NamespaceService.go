// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	bobber "github.com/tylerdimon/bobber"
)

// NamespaceService is an autogenerated mock type for the NamespaceService type
type NamespaceService struct {
	mock.Mock
}

type NamespaceService_Expecter struct {
	mock *mock.Mock
}

func (_m *NamespaceService) EXPECT() *NamespaceService_Expecter {
	return &NamespaceService_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: request
func (_m *NamespaceService) Add(request bobber.Namespace) (*bobber.Namespace, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *bobber.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(bobber.Namespace) (*bobber.Namespace, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(bobber.Namespace) *bobber.Namespace); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bobber.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(bobber.Namespace) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceService_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type NamespaceService_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - request bobber.Namespace
func (_e *NamespaceService_Expecter) Add(request interface{}) *NamespaceService_Add_Call {
	return &NamespaceService_Add_Call{Call: _e.mock.On("Add", request)}
}

func (_c *NamespaceService_Add_Call) Run(run func(request bobber.Namespace)) *NamespaceService_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bobber.Namespace))
	})
	return _c
}

func (_c *NamespaceService_Add_Call) Return(_a0 *bobber.Namespace, _a1 error) *NamespaceService_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamespaceService_Add_Call) RunAndReturn(run func(bobber.Namespace) (*bobber.Namespace, error)) *NamespaceService_Add_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function with given fields: id
func (_m *NamespaceService) DeleteById(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NamespaceService_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type NamespaceService_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - id string
func (_e *NamespaceService_Expecter) DeleteById(id interface{}) *NamespaceService_DeleteById_Call {
	return &NamespaceService_DeleteById_Call{Call: _e.mock.On("DeleteById", id)}
}

func (_c *NamespaceService_DeleteById_Call) Run(run func(id string)) *NamespaceService_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *NamespaceService_DeleteById_Call) Return(_a0 error) *NamespaceService_DeleteById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NamespaceService_DeleteById_Call) RunAndReturn(run func(string) error) *NamespaceService_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *NamespaceService) GetAll() ([]*bobber.Namespace, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*bobber.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*bobber.Namespace, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*bobber.Namespace); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*bobber.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type NamespaceService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *NamespaceService_Expecter) GetAll() *NamespaceService_GetAll_Call {
	return &NamespaceService_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *NamespaceService_GetAll_Call) Run(run func()) *NamespaceService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NamespaceService_GetAll_Call) Return(_a0 []*bobber.Namespace, _a1 error) *NamespaceService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamespaceService_GetAll_Call) RunAndReturn(run func() ([]*bobber.Namespace, error)) *NamespaceService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *NamespaceService) GetById(id string) (*bobber.Namespace, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *bobber.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*bobber.Namespace, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *bobber.Namespace); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bobber.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceService_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type NamespaceService_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id string
func (_e *NamespaceService_Expecter) GetById(id interface{}) *NamespaceService_GetById_Call {
	return &NamespaceService_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *NamespaceService_GetById_Call) Run(run func(id string)) *NamespaceService_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *NamespaceService_GetById_Call) Return(_a0 *bobber.Namespace, _a1 error) *NamespaceService_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamespaceService_GetById_Call) RunAndReturn(run func(string) (*bobber.Namespace, error)) *NamespaceService_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: request
func (_m *NamespaceService) Update(request bobber.Namespace) (*bobber.Namespace, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *bobber.Namespace
	var r1 error
	if rf, ok := ret.Get(0).(func(bobber.Namespace) (*bobber.Namespace, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(bobber.Namespace) *bobber.Namespace); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bobber.Namespace)
		}
	}

	if rf, ok := ret.Get(1).(func(bobber.Namespace) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NamespaceService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type NamespaceService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - request bobber.Namespace
func (_e *NamespaceService_Expecter) Update(request interface{}) *NamespaceService_Update_Call {
	return &NamespaceService_Update_Call{Call: _e.mock.On("Update", request)}
}

func (_c *NamespaceService_Update_Call) Run(run func(request bobber.Namespace)) *NamespaceService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bobber.Namespace))
	})
	return _c
}

func (_c *NamespaceService_Update_Call) Return(_a0 *bobber.Namespace, _a1 error) *NamespaceService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NamespaceService_Update_Call) RunAndReturn(run func(bobber.Namespace) (*bobber.Namespace, error)) *NamespaceService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewNamespaceService creates a new instance of NamespaceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNamespaceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NamespaceService {
	mock := &NamespaceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
