// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	bobber "github.com/tylerdimon/bobber"
)

// EndpointService is an autogenerated mock type for the EndpointService type
type EndpointService struct {
	mock.Mock
}

type EndpointService_Expecter struct {
	mock *mock.Mock
}

func (_m *EndpointService) EXPECT() *EndpointService_Expecter {
	return &EndpointService_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: request
func (_m *EndpointService) Add(request bobber.Endpoint) (*bobber.Endpoint, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *bobber.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(bobber.Endpoint) (*bobber.Endpoint, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(bobber.Endpoint) *bobber.Endpoint); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bobber.Endpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(bobber.Endpoint) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndpointService_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type EndpointService_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - request bobber.Endpoint
func (_e *EndpointService_Expecter) Add(request interface{}) *EndpointService_Add_Call {
	return &EndpointService_Add_Call{Call: _e.mock.On("Add", request)}
}

func (_c *EndpointService_Add_Call) Run(run func(request bobber.Endpoint)) *EndpointService_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bobber.Endpoint))
	})
	return _c
}

func (_c *EndpointService_Add_Call) Return(_a0 *bobber.Endpoint, _a1 error) *EndpointService_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EndpointService_Add_Call) RunAndReturn(run func(bobber.Endpoint) (*bobber.Endpoint, error)) *EndpointService_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *EndpointService) GetAll() ([]bobber.Endpoint, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []bobber.Endpoint
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]bobber.Endpoint, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []bobber.Endpoint); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bobber.Endpoint)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndpointService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type EndpointService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *EndpointService_Expecter) GetAll() *EndpointService_GetAll_Call {
	return &EndpointService_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *EndpointService_GetAll_Call) Run(run func()) *EndpointService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EndpointService_GetAll_Call) Return(_a0 []bobber.Endpoint, _a1 error) *EndpointService_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EndpointService_GetAll_Call) RunAndReturn(run func() ([]bobber.Endpoint, error)) *EndpointService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewEndpointService creates a new instance of EndpointService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEndpointService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EndpointService {
	mock := &EndpointService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
